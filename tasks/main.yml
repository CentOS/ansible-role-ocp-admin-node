# Defaults tasks for role ocp-admin-node

- name: Creating unprivileged user dedicated to ocp admin cli tasks
  user:
    name: "{{ ocp_service_account }}"
    shell: /bin/bash
    create_home: True
    comment: "OCP admin account"

- name: Creating ocp directories for cli
  file:
    path: "/home/{{ ocp_service_account }}/{{ item }}"
    state: directory
    owner: "{{ ocp_service_account }}"
    group: "{{ ocp_service_account }}"
  with_items:
    - bin
    - ocp_downloads
    - ocp_configs
    - .kube

- name: Downloading required openshift cli tools
  get_url:
    dest: "/home/{{ ocp_service_account }}/ocp_downloads/"
    url: "{{ item }}"
  with_items:
    - "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_openshift_version }}/openshift-client-linux-{{ ocp_openshift_version }}.tar.gz"
    - "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_openshift_version }}/openshift-install-linux-{{ ocp_openshift_version }}.tar.gz"
  register: ocp_cli_download

- name: Extracting openshift cli tools
  unarchive:
    dest: "/home/{{ ocp_service_account }}/bin/"
    remote_src: True
    src: "/home/{{ ocp_service_account }}/ocp_downloads/{{ item }}"
  with_items:
    - "openshift-client-linux-{{ ocp_openshift_version }}.tar.gz"
    - "openshift-install-linux-{{ ocp_openshift_version }}.tar.gz"
  when: ocp_cli_download is changed 

- name: Distributing kube config for ocp admin user
  copy:
    src: "{{ pkistore }}/{{ ocp_kubeconfig_file }}"
    dest: "/home/{{ ocp_service_account }}/.kube/config"
    owner: "{{ ocp_service_account }}"
    group: "{{ ocp_service_account }}"
    mode: 0600

- name: Distributing openshift storage templates
  template:
    src: "{{ item }}.j2"
    dest: "/home/{{ ocp_service_account }}/ocp_configs/{{ item }}"
  with_items: "{{ ocp_storage_templates }}"
  register: ocp_storage_templates_result
  tags:
    - config

- name: Apply openshift local storage config
  block:
    - name: Create subscription for the Local Storage Operator
      command: "/home/{{ ocp_service_account }}/bin/oc apply -f /home/{{ ocp_service_account }}/ocp_configs/local_storage_operator_subscription.yaml"
      tags:
        - localstorage

    - name: Wait for the Local Storage Operator deployment to succeed
      shell: "/home/{{ ocp_service_account }}/bin/oc get deployment local-storage-operator -n local-storage"
      register: get_local_storage_deployment_cmd
      failed_when: get_local_storage_deployment_cmd.rc != 0
      until: get_local_storage_deployment_cmd.rc == 0
      retries: 10
      delay: 5
      tags:
        - localstorage

    - name: Create LocalVolume configuration for the Local Storage Operator
      command: "/home/{{ ocp_service_account }}/bin/oc apply -f /home/{{ ocp_service_account }}/ocp_configs/local_storage_operator_localvolume.yaml"
      tags:
        - localstorage
  when: ocp_storage_templates_result is changed      
  become_user: "{{ ocp_service_account }}"


- name: Distributing ingress controller TLS cert
  copy:
    src: "{{ pkistore }}/{{ item }}"
    dest: "/home/{{ ocp_service_account }}/ocp_configs/{{ item }}"
    owner: "{{ ocp_service_account }}"
    group: "{{ ocp_service_account }}"
    mode: 0600
  with_items: "{{ ocp_ingress_tls_cert_files }}"
  register: ocp_ingress_controller_certs_result
  tags:
    - certs


- name: Apply openshift ingress controller certs
  block:
    - name: Query existance of the custom-ca configmap
      command: "/home/{{ ocp_service_account }}/bin/oc get configmap custom-ca -n openshift-config"
      register: check-custom-ca-exists
      tags:
        - certs
    - name: The custom-ca configmap already exists (cert renewal), delete it
      command: "/home/{{ ocp_service_account }}/bin/oc delete configmap custom-ca -n openshift-config"
      tags:
        - certs
      when: check-custom-ca-exists.rc == 0
    - name: Then (re)create the custom-ca configmap that includes the CA used to sign the new cert.
      command: "/home/{{ ocp_service_account }}/bin/oc create configmap custom-ca --from-file=ca-bundle.crt=/home{{ ocp_service_account }}/ocp_configs/apps.ci.centos.org-CAChain.crt -n openshift-config"
      tags:
        - certs

    - name: Update the cluster-wide proxy configuration with the newly created ConfigMap.
      command: "/home/{{ ocp_service_account }}/bin/oc patch proxy/cluster --type=merge --patch='{\"spec\":{\"trustedCA\":{\"name\":\"custom-ca\"}}}'"
      tags:
        - certs

    - name: Query existance of the letsencrypt secret
      command: "/home/{{ ocp_service_account }}/bin/oc get secret letsencrypt -n openshift-ingress"
      register: check-letsencrypt-exists
      tags:
        - certs
    - name: The letsencrypt secret exists (cert renewal), delete it
      command: "/home/{{ ocp_service_account }}/bin/oc delete secret letsencrypt -n openshift-ingress"
      tags:
        - certs
      when: check-letsencrypt-exists.rc == 0
    - name: Then (re)create the secret that contains the wildcard cert and key.
      command: "/home/{{ ocp_service_account }}/bin/oc create secret tls letsencrypt --cert=/home{{ ocp_service_account }}/ocp_configs/apps.ocp.ci.centos.org.crt --key=/home{{ ocp_service_account }}/ocp_configs/apps.ocp.ci.centos.org.key  -n openshift-ingress"
      tags:
        - certs

    - name: Then update the Ingress Controller configuration with the newly created secret.
      command: "/home/{{ ocp_service_account }}/bin/oc patch ingresscontroller.operator default --type=merge -p '{\"spec\":{\"defaultCertificate\":{\"name\":\"letsencrypt\"}}}'
      -n openshift-ingress-operator"
      tags:
        - certs
  when: ocp_ingress_controller_certs_result is changed
  become_user: "{{ ocp_service_account }}"
