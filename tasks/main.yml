# Defaults tasks for role ocp-admin-node

- name: Creating unprivileged user dedicated to ocp admin cli tasks
  user:
    name: "{{ ocp_service_account }}"
    shell: /bin/bash
    create_home: True
    comment: "OCP admin account"

- name: Creating ocp directories for cli
  file:
    path: "/home/{{ ocp_service_account }}/{{ item }}"
    state: directory
    owner: "{{ ocp_service_account }}"
    group: "{{ ocp_service_account }}"
  with_items:
    - bin
    - ocp_downloads
    - ocp_configs
    - ocp_backups
    - .kube
  tags:
    - backup

- name: Downloading required openshift cli tools
  get_url:
    dest: "/home/{{ ocp_service_account }}/ocp_downloads/"
    url: "{{ item }}"
  with_items:
    - "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_openshift_version }}/openshift-client-linux-{{ ocp_openshift_version }}.tar.gz"
    - "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_openshift_version }}/openshift-install-linux-{{ ocp_openshift_version }}.tar.gz"
  register: ocp_cli_download
  tags:
    - cli

- name: Extracting openshift cli tools
  unarchive:
    dest: "/home/{{ ocp_service_account }}/bin/"
    remote_src: True
    src: "/home/{{ ocp_service_account }}/ocp_downloads/{{ item }}"
  with_items:
    - "openshift-client-linux-{{ ocp_openshift_version }}.tar.gz"
    - "openshift-install-linux-{{ ocp_openshift_version }}.tar.gz"
  when: ocp_cli_download is changed 
  tags:
    - cli

- name: Distributing kube config for ocp admin user
  copy:
    src: "{{ pkistore }}/{{ ocp_kubeconfig_file }}"
    dest: "/home/{{ ocp_service_account }}/.kube/config"
    owner: "{{ ocp_service_account }}"
    group: "{{ ocp_service_account }}"
    mode: 0600

- name: Distributing openshift storage templates
  template:
    src: "{{ item }}.j2"
    dest: "/home/{{ ocp_service_account }}/ocp_configs/{{ item }}"
  with_items: "{{ ocp_storage_templates }}"
  register: ocp_storage_templates_result
  tags:
    - config

- name: Apply openshift local storage config
  block:
    - name: Create subscription for the Local Storage Operator
      command: "/home/{{ ocp_service_account }}/bin/oc apply -f /home/{{ ocp_service_account }}/ocp_configs/local_storage_operator_subscription.yaml"
      tags:
        - localstorage

    - name: Wait for the Local Storage Operator deployment to succeed
      shell: "/home/{{ ocp_service_account }}/bin/oc get deployment local-storage-operator -n local-storage"
      register: get_local_storage_deployment_cmd
      failed_when: get_local_storage_deployment_cmd.rc != 0
      until: get_local_storage_deployment_cmd.rc == 0
      retries: 10
      delay: 5
      tags:
        - localstorage

    - name: Create LocalVolume configuration for the Local Storage Operator
      command: "/home/{{ ocp_service_account }}/bin/oc apply -f /home/{{ ocp_service_account }}/ocp_configs/local_storage_operator_localvolume.yaml"
      tags:
        - localstorage
  when: ocp_storage_templates_result is changed      
  become_user: "{{ ocp_service_account }}"


- include_tasks: tls.yml
  tags: 
    - tls
    - certs

- include_tasks: backup.yml
  tags:
    - backup

- include_tasks: auth.yml
  when: ocp_oauth
  tags:
    - auth

# Defining cluster-admins group/role binding if enabled in inventory
- block:
    - name: Definining ocp admin group
      template: 
        src: openshift-admin-group.yml.j2
        dest: "/home/{{ ocp_service_account }}/ocp_configs/openshift-admin-group.yml"
      register: ocp_admin_group
    
    - name: Reflecting admin group membership and role binding if needed
      command:
        cmd: "bin/oc apply -f ocp_configs/openshift-admin-group.yml"
        chdir: "/home/{{ ocp_service_account }}"
      when: ocp_admin_group is changed

  when: ocp_define_cluster_admins
  tags:
    - admins

# Creating projects defined in inventory
- name: Creating projects in openshift if needed
  block:
    - name: "Rendering template for projects "
      template: 
        src: project.yml.j2
        dest: "/home/{{ ocp_service_account }}/ocp_configs/project-{{ item.name }}.yml"
      register: ocp_projects  
      with_items: "{{ ocp_projects_list }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Creating/modifying project if needed
      command:
        cmd: "bin/oc apply -f ocp_configs/project-{{ item.item.name }}.yml"
        chdir: "/home/{{ ocp_service_account }}"
      with_items: "{{ ocp_projects.results }}"
      when: item is changed
      loop_control:
        label: "{{ item.item.name }}"
   
    - name: Deleting project[s] if needed
      shell:
        cmd: "bin/oc get projects|grep {{ item.name }} && bin/oc delete project {{ item.name }} || exit 2"
        chdir: "/home/{{ ocp_service_account }}"
      register: delete_project
      failed_when: "delete_project.rc == 1"
      changed_when: delete_project.rc != 2
      with_items: "{{ ocp_projects_to_delete_list }}"
      loop_control:
        label: "{{ item.name }}"

  become_user: "{{ ocp_service_account }}"
  tags:
    - projects

- include_tasks: fas-projects.yml
  when: ocp_fas_sync
  tags:
    - fas

    
